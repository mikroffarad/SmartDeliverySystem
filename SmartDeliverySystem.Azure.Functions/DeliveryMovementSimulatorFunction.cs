using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using System.Text.Json;
using System.Net.Http;
using System.Text;
using SmartDeliverySystem.Azure.Functions.DTOs;

namespace SmartDeliverySystem.Azure.Functions
{
    public class DeliveryMovementSimulatorFunction
    {
        private readonly ILogger<DeliveryMovementSimulatorFunction> _logger;
        private readonly HttpClient _httpClient;
        private readonly Dictionary<int, RouteSimulation> _activeRoutes = new();

        public DeliveryMovementSimulatorFunction(ILogger<DeliveryMovementSimulatorFunction> logger, HttpClient httpClient)
        {
            _logger = logger;
            _httpClient = httpClient;
        }
        [Function("DeliveryMovementSimulator")]
        public async Task Run([TimerTrigger("0/1 * * * * *")] TimerInfo myTimer) // –ö–æ–∂–Ω—É —Å–µ–∫—É–Ω–¥—É
        {
            var timestamp = DateTime.Now.ToString("HH:mm:ss.fff");
            _logger.LogInformation("üöõ [{Timestamp}] –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä—É—Ö—É –¥–æ—Å—Ç–∞–≤–æ–∫...", timestamp);

            try
            {
                // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
                var response = await _httpClient.GetAsync("https://localhost:7183/api/delivery/tracking/active");
                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogWarning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏");
                    return;
                }
                var deliveriesJson = await response.Content.ReadAsStringAsync();
                // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–æ–∫, –∞ –Ω–µ –≤–µ—Å—å JSON
                _logger.LogInformation("üì¶ –û—Ç—Ä–∏–º–∞–Ω–æ JSON –¥–æ—Å—Ç–∞–≤–æ–∫ (—Å–∏–º–≤–æ–ª—ñ–≤: {Length})", deliveriesJson.Length);

                var deliveries = JsonSerializer.Deserialize<List<DeliveryTrackingData>>(deliveriesJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (deliveries == null || !deliveries.Any())
                {
                    _logger.LogInformation("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó");
                    return;
                }

                _logger.LogInformation("üìã –í—Å—å–æ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {Total}, InTransit: {InTransit}",
                    deliveries.Count, deliveries.Count(d => d.Status == 3));

                foreach (var delivery in deliveries.Where(d => d.Status == 3)) // 3 = InTransit
                {
                    _logger.LogInformation("üöõ –û–±—Ä–æ–±–ª—è—é –¥–æ—Å—Ç–∞–≤–∫—É {DeliveryId} –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º {Status}",
                        delivery.DeliveryId, delivery.Status);
                    await SimulateDeliveryMovement(delivery);
                }

                _logger.LogInformation($"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {deliveries.Count(d => d.Status == 3)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä—É—Ö—É –¥–æ—Å—Ç–∞–≤–æ–∫");
            }
        }
        private async Task SimulateDeliveryMovement(DeliveryTrackingData delivery)
        {
            try
            {
                _logger.LogInformation("üöõ === –°–∏–º—É–ª—è—Ü—ñ—è —Ä—É—Ö—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId} ===", delivery.DeliveryId);

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                if (!delivery.VendorLatitude.HasValue || !delivery.VendorLongitude.HasValue ||
                    !delivery.StoreLatitude.HasValue || !delivery.StoreLongitude.HasValue)
                {
                    _logger.LogWarning("–î–æ—Å—Ç–∞–≤–∫–∞ {DeliveryId} –Ω–µ –º–∞—î –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", delivery.DeliveryId);
                    return;
                }

                // –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Ä—à—Ä—É—Ç
                RouteSimulation routeSimulation;

                if (!_activeRoutes.ContainsKey(delivery.DeliveryId))
                {
                    _logger.LogInformation("üó∫Ô∏è –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);

                    var route = await GetRouteFromOSRM(
                        delivery.VendorLatitude.Value, delivery.VendorLongitude.Value,
                        delivery.StoreLatitude.Value, delivery.StoreLongitude.Value);

                    if (route == null || !route.Any())
                    {
                        _logger.LogWarning("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
                        return;
                    }

                    // –û—Ç—Ä–∏–º—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –ø–æ—á–∏–Ω–∞—î–º–æ –∑ 0
                    var savedIndex = await GetSavedRouteIndexAsync(delivery.DeliveryId);

                    routeSimulation = new RouteSimulation
                    {
                        RoutePoints = route,
                        CurrentIndex = savedIndex,
                        StartTime = DateTime.UtcNow
                    };

                    _activeRoutes[delivery.DeliveryId] = routeSimulation;

                    _logger.LogInformation("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId} –∑ {PointCount} —Ç–æ—á–æ–∫, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —ñ–Ω–¥–µ–∫—Å—É {Index}",
                        delivery.DeliveryId, route.Count, savedIndex);
                }
                else
                {
                    routeSimulation = _activeRoutes[delivery.DeliveryId];
                    _logger.LogInformation("üîÑ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —ñ—Å–Ω—É—é—á–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
                }

                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
                _logger.LogInformation("üìä –î–æ—Å—Ç–∞–≤–∫–∞ {DeliveryId}: —Ç–æ—á–∫–∞ {CurrentIndex}/{TotalPoints}",
                    delivery.DeliveryId, routeSimulation.CurrentIndex, routeSimulation.RoutePoints.Count);                // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç—É
                var nextPosition = GetNextRoutePosition(routeSimulation);

                if (nextPosition == null)
                {
                    // –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –ø—Ä–∏–±—É—Ç—Ç—è –Ω–∞ –º—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
                    _logger.LogInformation("üéØ –î–æ—Å—Ç–∞–≤–∫–∞ {DeliveryId} –¥–æ—Å—è–≥–ª–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è", delivery.DeliveryId);
                    _activeRoutes.Remove(delivery.DeliveryId);
                    await ClearSavedRouteIndexAsync(delivery.DeliveryId);                    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—é –ø–æ–∑–Ω–∞—á–∫–æ—é –ø—Ä–æ –ø—Ä–∏–±—É—Ç—Ç—è
                    await UpdateDeliveryLocation(delivery.DeliveryId,
                        delivery.StoreLatitude.Value, delivery.StoreLongitude.Value,
                        0, "üéØ –ü—Ä–∏–±—É—Ç—Ç—è –Ω–∞ –º—ñ—Å—Ü–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è");

                    // –ó–∞—Ç—Ä–∏–º–∫–∞ 5 —Å–µ–∫—É–Ω–¥, –ø–æ—Ç—ñ–º –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ Delivered
                    await Task.Delay(3000);

                    try
                    {
                        var statusUpdateContent = new StringContent("4", Encoding.UTF8, "application/json"); // 4 = Delivered
                        var statusResponse = await _httpClient.PutAsync(
                            $"https://localhost:7183/api/delivery/{delivery.DeliveryId}/status",
                            statusUpdateContent);

                        if (statusResponse.IsSuccessStatusCode)
                        {
                            _logger.LogInformation("‚úÖ –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId} –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ Delivered", delivery.DeliveryId);
                        }
                        else
                        {
                            _logger.LogWarning("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
                        }
                    }
                    catch (Exception ex)
                    {
                        _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
                    }

                    return;
                }

                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—è —Ç–æ—á–∫–∞
                if (routeSimulation.CurrentIndex >= routeSimulation.RoutePoints.Count - 1)
                {
                    _logger.LogInformation("üéØ –î–æ—Å—Ç–∞–≤–∫–∞ {DeliveryId} –º–∞–π–∂–µ –ø—Ä–∏–±—É–ª–∞! –ù–∞—Å—Ç—É–ø–Ω–∞ —Ç–æ—á–∫–∞ - –æ—Å—Ç–∞–Ω–Ω—è.", delivery.DeliveryId);
                }

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
                await SaveRouteIndexAsync(delivery.DeliveryId, routeSimulation.CurrentIndex);

                // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–æ—Å—Ç–∞–≤–∫–∏
                await UpdateDeliveryLocation(delivery.DeliveryId,
                    nextPosition.Value.Latitude, nextPosition.Value.Longitude,
                    50, "üöõ –†—É—Ö");

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä—É—Ö—É –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
            }
        }
        private async Task<List<RoutePoint>> GetRouteFromOSRM(double fromLat, double fromLon, double toLat, double toLon)
        {
            try
            {
                // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π OSRM API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
                // –í–∞–∂–ª–∏–≤–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ InvariantCulture –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–∫—Ä–∞–ø–∫–∞ –∑–∞–º—ñ—Å—Ç—å –∫–æ–º–∏)
                var url = $"http://router.project-osrm.org/route/v1/driving/{fromLon.ToString(System.Globalization.CultureInfo.InvariantCulture)},{fromLat.ToString(System.Globalization.CultureInfo.InvariantCulture)};{toLon.ToString(System.Globalization.CultureInfo.InvariantCulture)},{toLat.ToString(System.Globalization.CultureInfo.InvariantCulture)}?overview=full&geometries=geojson";

                _logger.LogInformation("üåê OSRM URL: {Url}", url);

                var response = await _httpClient.GetAsync(url);
                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogWarning("OSRM API –∑–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {StatusCode}", response.StatusCode);
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogWarning("OSRM Error: {Error}", errorContent);
                    return null;
                }

                var jsonContent = await response.Content.ReadAsStringAsync();
                var osrmResponse = JsonSerializer.Deserialize<OSRMResponse>(jsonContent);

                if (osrmResponse?.routes == null || !osrmResponse.routes.Any())
                {
                    _logger.LogWarning("OSRM –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –º–∞—Ä—à—Ä—É—Ç");
                    return null;
                }

                var coordinates = osrmResponse.routes[0].geometry.coordinates;
                var routePoints = coordinates.Select(coord => new RoutePoint
                {
                    Latitude = coord[1], // –í GeoJSON —Å–ø–æ—á–∞—Ç–∫—É longitude, –ø–æ—Ç—ñ–º latitude
                    Longitude = coord[0]
                }).ToList();                // –ó–º–µ–Ω—à—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ—á–æ–∫ –¥–ª—è –ø–ª–∞–≤–Ω—ñ—à–æ–≥–æ —Ä—É—Ö—É (–∫–æ–∂–Ω–∞ n-–Ω–∞ —Ç–æ—á–∫–∞)
                var simplifiedRoute = routePoints.Where((point, index) => index % 2 == 0).ToList();

                // –í–ê–ñ–õ–ò–í–û: –î–æ–¥–∞—î–º–æ —Ç–æ—á–Ω—É –∫—ñ–Ω—Ü–µ–≤—É —Ç–æ—á–∫—É –º–∞–≥–∞–∑–∏–Ω—É
                var storePoint = new RoutePoint
                {
                    Latitude = toLat, // –¢–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—É
                    Longitude = toLon
                };

                // –ó–∞–º—ñ–Ω—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ç–æ—á–∫—É –Ω–∞ —Ç–æ—á–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω—É
                if (simplifiedRoute.Any())
                {
                    simplifiedRoute[simplifiedRoute.Count - 1] = storePoint;
                }
                else
                {
                    simplifiedRoute.Add(storePoint);
                }

                return simplifiedRoute;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É –∑ OSRM");
                return null;
            }
        }
        private (double Latitude, double Longitude)? GetNextRoutePosition(RouteSimulation routeSimulation)
        {
            if (routeSimulation.CurrentIndex >= routeSimulation.RoutePoints.Count)
            {
                return null; // –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            }

            var currentPoint = routeSimulation.RoutePoints[routeSimulation.CurrentIndex];
            routeSimulation.CurrentIndex++;

            _logger.LogInformation("üéØ –ü–µ—Ä–µ—Ö–æ–¥–∂—É –¥–æ —Ç–æ—á–∫–∏ {Index}/{Total}: {Lat}, {Lon}",
                routeSimulation.CurrentIndex, routeSimulation.RoutePoints.Count,
                currentPoint.Latitude, currentPoint.Longitude);

            return (currentPoint.Latitude, currentPoint.Longitude);
        }
        private async Task UpdateDeliveryLocation(int deliveryId, double latitude, double longitude, double speed, string notes)
        {
            try
            {
                var locationUpdate = new
                {
                    latitude = latitude,
                    longitude = longitude,
                    speed = speed,
                    notes = notes
                };

                var json = JsonSerializer.Serialize(locationUpdate);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                _logger.LogInformation("üåê –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}: {Lat}, {Lon}",
                    deliveryId, latitude, longitude);

                var updateResponse = await _httpClient.PostAsync(
                    $"https://localhost:7183/api/delivery/{deliveryId}/update-location",
                    content);

                if (updateResponse.IsSuccessStatusCode)
                {
                    _logger.LogInformation("‚úÖ –£—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—é –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", deliveryId);
                }
                else
                {
                    var errorContent = await updateResponse.Content.ReadAsStringAsync();
                    _logger.LogWarning("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}: {StatusCode}, {Error}",
                        deliveryId, updateResponse.StatusCode, errorContent);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", deliveryId);
            }
        }

        private async Task<int> GetSavedRouteIndexAsync(int deliveryId)
        {
            try
            {
                // –ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTTP –∑–∞–ø–∏—Ç –¥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
                var response = await _httpClient.GetAsync($"https://localhost:7183/api/delivery/{deliveryId}/route-index");
                if (response.IsSuccessStatusCode)
                {
                    var indexString = await response.Content.ReadAsStringAsync();
                    if (int.TryParse(indexString, out int savedIndex))
                    {
                        _logger.LogInformation("üìç –ó–Ω–∞–π–¥–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å {Index} –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", savedIndex, deliveryId);
                        return savedIndex;
                    }
                }

                _logger.LogInformation("üìç –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}, –ø–æ—á–∏–Ω–∞—î–º–æ –∑ 0", deliveryId);
                return 0;
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", deliveryId);
                return 0;
            }
        }

        private async Task SaveRouteIndexAsync(int deliveryId, int currentIndex)
        {
            try
            {
                var indexData = new { index = currentIndex };
                var json = JsonSerializer.Serialize(indexData);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await _httpClient.PostAsync($"https://localhost:7183/api/delivery/{deliveryId}/route-index", content);
                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ–Ω–¥–µ–∫—Å {Index} –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", currentIndex, deliveryId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", deliveryId);
            }
        }

        private async Task ClearSavedRouteIndexAsync(int deliveryId)
        {
            try
            {
                var response = await _httpClient.DeleteAsync($"https://localhost:7183/api/delivery/{deliveryId}/route-index");
                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("üóëÔ∏è –û—á–∏—â–µ–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", deliveryId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —ñ–Ω–¥–µ–∫—Å—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", deliveryId);
            }
        }
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –∫–ª–∞—Å–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
    public class RouteSimulation
    {
        public List<RoutePoint> RoutePoints { get; set; } = new();
        public int CurrentIndex { get; set; }
        public DateTime StartTime { get; set; }
    }

    public class RoutePoint
    {
        public double Latitude { get; set; }
        public double Longitude { get; set; }
    }

    // –ö–ª–∞—Å–∏ –¥–ª—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó OSRM –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    public class OSRMResponse
    {
        public OSRMRoute[] routes { get; set; }
    }

    public class OSRMRoute
    {
        public OSRMGeometry geometry { get; set; }
        public double distance { get; set; }
        public double duration { get; set; }
    }

    public class OSRMGeometry
    {
        public double[][] coordinates { get; set; }
    }
}
