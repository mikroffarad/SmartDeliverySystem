using Microsoft.Azure.Functions.Worker;
using Microsoft.Extensions.Logging;
using System.Text.Json;
using System.Net.Http;
using System.Text;

namespace SmartDeliverySystem.Azure.Functions
{
    public class DeliveryMovementSimulatorFunction
    {
        private readonly ILogger<DeliveryMovementSimulatorFunction> _logger;
        private readonly HttpClient _httpClient;

        public DeliveryMovementSimulatorFunction(ILogger<DeliveryMovementSimulatorFunction> logger, HttpClient httpClient)
        {
            _logger = logger;
            _httpClient = httpClient;
        }

        [Function("DeliveryMovementSimulator")]
        public async Task Run([TimerTrigger("0/1 * * * * *")] TimerInfo myTimer) // –ö–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥
        {
            _logger.LogInformation("üöõ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä—É—Ö—É –¥–æ—Å—Ç–∞–≤–æ–∫...");

            try
            {
                // –û—Ç—Ä–∏–º—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏
                var response = await _httpClient.GetAsync("https://localhost:7183/api/delivery/tracking/active");
                if (!response.IsSuccessStatusCode)
                {
                    _logger.LogWarning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –¥–æ—Å—Ç–∞–≤–∫–∏");
                    return;
                }

                var deliveriesJson = await response.Content.ReadAsStringAsync();
                var deliveries = JsonSerializer.Deserialize<List<DeliveryTrackingData>>(deliveriesJson, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });

                if (deliveries == null || !deliveries.Any())
                {
                    _logger.LogInformation("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫ –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó");
                    return;
                }
                foreach (var delivery in deliveries.Where(d => d.Status == 3)) // 3 = InTransit
                {
                    await SimulateDeliveryMovement(delivery);
                }

                _logger.LogInformation($"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {deliveries.Count(d => d.Status == 3)} –∞–∫—Ç–∏–≤–Ω–∏—Ö –¥–æ—Å—Ç–∞–≤–æ–∫");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä—É—Ö—É –¥–æ—Å—Ç–∞–≤–æ–∫");
            }
        }

        private async Task SimulateDeliveryMovement(DeliveryTrackingData delivery)
        {
            try
            {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
                if (!delivery.VendorLatitude.HasValue || !delivery.VendorLongitude.HasValue ||
                    !delivery.StoreLatitude.HasValue || !delivery.StoreLongitude.HasValue ||
                    !delivery.CurrentLatitude.HasValue || !delivery.CurrentLongitude.HasValue)
                {
                    _logger.LogWarning("–î–æ—Å—Ç–∞–≤–∫–∞ {DeliveryId} –Ω–µ –º–∞—î –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", delivery.DeliveryId);
                    return;
                }

                // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é
                var newPosition = CalculateNextPosition(
                    delivery.CurrentLatitude.Value, delivery.CurrentLongitude.Value,
                    delivery.StoreLatitude.Value, delivery.StoreLongitude.Value,
                    speedKmh: 50 // —à–≤–∏–¥–∫—ñ—Å—Ç—å 50 –∫–º/–≥–æ–¥
                );

                // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                var locationUpdate = new
                {
                    latitude = newPosition.Latitude,
                    longitude = newPosition.Longitude,
                    speed = 50.0,
                    notes = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó"
                };

                var json = JsonSerializer.Serialize(locationUpdate);
                var content = new StringContent(json, Encoding.UTF8, "application/json"); var updateResponse = await _httpClient.PostAsync(
                    $"https://localhost:7183/api/delivery/{delivery.DeliveryId}/update-location",
                    content);

                if (updateResponse.IsSuccessStatusCode)
                {
                    _logger.LogInformation("üìç –û–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∏—Ü—ñ—é –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}: {Lat}, {Lon}",
                        delivery.DeliveryId, newPosition.Latitude, newPosition.Longitude);
                }
                else
                {
                    _logger.LogWarning("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó —Ä—É—Ö—É –¥–æ—Å—Ç–∞–≤–∫–∏ {DeliveryId}", delivery.DeliveryId);
            }
        }

        private (double Latitude, double Longitude) CalculateNextPosition(
            double currentLat, double currentLon,
            double targetLat, double targetLon,
            double speedKmh)
        {
            // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –¥–æ —Ü—ñ–ª—ñ
            var distance = CalculateDistance(currentLat, currentLon, targetLat, targetLon);

            // –Ø–∫—â–æ –¥—É–∂–µ –±–ª–∏–∑—å–∫–æ –¥–æ —Ü—ñ–ª—ñ (–º–µ–Ω—à–µ 50 –º–µ—Ç—Ä—ñ–≤), –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ü—ñ–ª—ñ
            if (distance < 0.05) // 50 –º–µ—Ç—Ä—ñ–≤
            {
                return (targetLat, targetLon);
            }

            // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö –∑–∞ 5 —Å–µ–∫—É–Ω–¥
            var speedPerSecond = speedKmh / 3600.0; // –∫–º/—Å–µ–∫
            var distanceToMove = speedPerSecond * 5; // –≤—ñ–¥—Å—Ç–∞–Ω—å –∑–∞ 5 —Å–µ–∫—É–Ω–¥

            // –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó —Ä—É—Ö—É
            var movementRatio = Math.Min(distanceToMove / distance, 1.0);

            // –ù–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
            var newLat = currentLat + (targetLat - currentLat) * movementRatio;
            var newLon = currentLon + (targetLon - currentLon) * movementRatio;

            return (newLat, newLon);
        }

        private static double CalculateDistance(double lat1, double lon1, double lat2, double lon2)
        {
            var dLat = (lat2 - lat1) * Math.PI / 180;
            var dLon = (lon2 - lon1) * Math.PI / 180;

            var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                    Math.Cos(lat1 * Math.PI / 180) * Math.Cos(lat2 * Math.PI / 180) *
                    Math.Sin(dLon / 2) * Math.Sin(dLon / 2);

            var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
            return 6371 * c; // –≤—ñ–¥—Å—Ç–∞–Ω—å –≤ –∫–º
        }
    }
    public class DeliveryTrackingData
    {
        public int DeliveryId { get; set; }
        public int Status { get; set; } // Status –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —è–∫ —á–∏—Å–ª–æ (enum)
        public double? CurrentLatitude { get; set; }
        public double? CurrentLongitude { get; set; }
        public double? VendorLatitude { get; set; }
        public double? VendorLongitude { get; set; }
        public double? StoreLatitude { get; set; }
        public double? StoreLongitude { get; set; }
    }
}
